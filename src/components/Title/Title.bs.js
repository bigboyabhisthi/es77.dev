// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var CssJs = require("bs-css-emotion/src/CssJs.bs.js");
var Theme = require("../../lib/Theme.bs.js");
var React = require("react");
var Motion = require("../../bindings/FramerMotion/Motion.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var title = CssJs.style([
      CssJs.color(CssJs.white),
      CssJs.fontFamily({
            NAME: "custom",
            VAL: Theme.fontFamily
          }),
      CssJs.fontSize(CssJs.rem(3.2)),
      CssJs.position(CssJs.relative),
      CssJs.paddingLeft(CssJs.rem(4.8)),
      CssJs.marginBottom(CssJs.rem(3.2)),
      CssJs.after([
            CssJs.contentRule({
                  NAME: "url",
                  VAL: "assets/triangle-icon.svg"
                }),
            CssJs.width(CssJs.rem(3.2)),
            CssJs.height(CssJs.rem(3.2)),
            CssJs.position(CssJs.absolute),
            CssJs.left(CssJs.zero)
          ])
    ]);

function Title(Props) {
  var children = Props.children;
  var innerRef = Props.innerRef;
  var animate = Props.animate;
  var initial = Props.initial;
  var variants = Props.variants;
  var tmp = {
    className: title,
    children: children
  };
  if (initial !== undefined) {
    tmp.initial = Caml_option.valFromOption(initial);
  }
  if (variants !== undefined) {
    tmp.variants = Caml_option.valFromOption(variants);
  }
  if (animate !== undefined) {
    tmp.animate = Caml_option.valFromOption(animate);
  }
  if (innerRef !== undefined) {
    tmp.innerRef = Caml_option.valFromOption(innerRef);
  }
  return React.createElement(Motion.H1.make, tmp);
}

var make = Title;

exports.title = title;
exports.make = make;
/* title Not a pure module */
